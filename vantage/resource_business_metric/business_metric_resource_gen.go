// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_business_metric

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func BusinessMetricResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"cost_report_tokens_with_metadata": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"cost_report_token": schema.StringAttribute{
							Required:            true,
							Description:         "The token of the CostReport the BusinessMetric is attached to.",
							MarkdownDescription: "The token of the CostReport the BusinessMetric is attached to.",
						},
						"label_filter": schema.ListAttribute{
							ElementType:         types.StringType,
							Optional:            true,
							Computed:            true,
							Description:         "Include only values with these labels in the CostReport.",
							MarkdownDescription: "Include only values with these labels in the CostReport.",
						},
						"unit_scale": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Determines the scale of the BusinessMetric's values within the CostReport.",
							MarkdownDescription: "Determines the scale of the BusinessMetric's values within the CostReport.",
							Validators: []validator.String{
								stringvalidator.OneOf(
									"per_unit",
									"per_hundred",
									"per_thousand",
									"per_million",
									"per_billion",
								),
							},
							Default: stringdefault.StaticString("per_unit"),
						},
					},
					CustomType: CostReportTokensWithMetadataType{
						ObjectType: types.ObjectType{
							AttrTypes: CostReportTokensWithMetadataValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "The tokens for any CostReports that use the BusinessMetric, the unit scale, and label filter.",
				MarkdownDescription: "The tokens for any CostReports that use the BusinessMetric, the unit scale, and label filter.",
			},
			"created_by_token": schema.StringAttribute{
				Computed:            true,
				Description:         "The token of the Creator of the BusinessMetric.",
				MarkdownDescription: "The token of the Creator of the BusinessMetric.",
			},
			"title": schema.StringAttribute{
				Required:            true,
				Description:         "The title of the BusinessMetrics.",
				MarkdownDescription: "The title of the BusinessMetrics.",
			},
			"token": schema.StringAttribute{
				Computed:            true,
				Description:         "The token of the business metric",
				MarkdownDescription: "The token of the business metric",
			},
			"values": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"amount": schema.Float64Attribute{
							Required: true,
						},
						"date": schema.StringAttribute{
							Required: true,
						},
						"label": schema.StringAttribute{
							Optional: true,
							Computed: true,
						},
					},
					CustomType: ValuesType{
						ObjectType: types.ObjectType{
							AttrTypes: ValuesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "The dates, amounts, and (optional) labels for the BusinessMetric.",
				MarkdownDescription: "The dates, amounts, and (optional) labels for the BusinessMetric.",
			},
		},
	}
}

type BusinessMetricModel struct {
	CostReportTokensWithMetadata types.List   `tfsdk:"cost_report_tokens_with_metadata"`
	CreatedByToken               types.String `tfsdk:"created_by_token"`
	Title                        types.String `tfsdk:"title"`
	Token                        types.String `tfsdk:"token"`
	Values                       types.List   `tfsdk:"values"`
}

var _ basetypes.ObjectTypable = CostReportTokensWithMetadataType{}

type CostReportTokensWithMetadataType struct {
	basetypes.ObjectType
}

func (t CostReportTokensWithMetadataType) Equal(o attr.Type) bool {
	other, ok := o.(CostReportTokensWithMetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CostReportTokensWithMetadataType) String() string {
	return "CostReportTokensWithMetadataType"
}

func (t CostReportTokensWithMetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	costReportTokenAttribute, ok := attributes["cost_report_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cost_report_token is missing from object`)

		return nil, diags
	}

	costReportTokenVal, ok := costReportTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cost_report_token expected to be basetypes.StringValue, was: %T`, costReportTokenAttribute))
	}

	labelFilterAttribute, ok := attributes["label_filter"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`label_filter is missing from object`)

		return nil, diags
	}

	labelFilterVal, ok := labelFilterAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`label_filter expected to be basetypes.ListValue, was: %T`, labelFilterAttribute))
	}

	unitScaleAttribute, ok := attributes["unit_scale"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`unit_scale is missing from object`)

		return nil, diags
	}

	unitScaleVal, ok := unitScaleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`unit_scale expected to be basetypes.StringValue, was: %T`, unitScaleAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CostReportTokensWithMetadataValue{
		CostReportToken: costReportTokenVal,
		LabelFilter:     labelFilterVal,
		UnitScale:       unitScaleVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewCostReportTokensWithMetadataValueNull() CostReportTokensWithMetadataValue {
	return CostReportTokensWithMetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewCostReportTokensWithMetadataValueUnknown() CostReportTokensWithMetadataValue {
	return CostReportTokensWithMetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCostReportTokensWithMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CostReportTokensWithMetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CostReportTokensWithMetadataValue Attribute Value",
				"While creating a CostReportTokensWithMetadataValue value, a missing attribute value was detected. "+
					"A CostReportTokensWithMetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CostReportTokensWithMetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CostReportTokensWithMetadataValue Attribute Type",
				"While creating a CostReportTokensWithMetadataValue value, an invalid attribute value was detected. "+
					"A CostReportTokensWithMetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CostReportTokensWithMetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CostReportTokensWithMetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CostReportTokensWithMetadataValue Attribute Value",
				"While creating a CostReportTokensWithMetadataValue value, an extra attribute value was detected. "+
					"A CostReportTokensWithMetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CostReportTokensWithMetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCostReportTokensWithMetadataValueUnknown(), diags
	}

	costReportTokenAttribute, ok := attributes["cost_report_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cost_report_token is missing from object`)

		return NewCostReportTokensWithMetadataValueUnknown(), diags
	}

	costReportTokenVal, ok := costReportTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cost_report_token expected to be basetypes.StringValue, was: %T`, costReportTokenAttribute))
	}

	labelFilterAttribute, ok := attributes["label_filter"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`label_filter is missing from object`)

		return NewCostReportTokensWithMetadataValueUnknown(), diags
	}

	labelFilterVal, ok := labelFilterAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`label_filter expected to be basetypes.ListValue, was: %T`, labelFilterAttribute))
	}

	unitScaleAttribute, ok := attributes["unit_scale"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`unit_scale is missing from object`)

		return NewCostReportTokensWithMetadataValueUnknown(), diags
	}

	unitScaleVal, ok := unitScaleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`unit_scale expected to be basetypes.StringValue, was: %T`, unitScaleAttribute))
	}

	if diags.HasError() {
		return NewCostReportTokensWithMetadataValueUnknown(), diags
	}

	return CostReportTokensWithMetadataValue{
		CostReportToken: costReportTokenVal,
		LabelFilter:     labelFilterVal,
		UnitScale:       unitScaleVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewCostReportTokensWithMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CostReportTokensWithMetadataValue {
	object, diags := NewCostReportTokensWithMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCostReportTokensWithMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CostReportTokensWithMetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCostReportTokensWithMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCostReportTokensWithMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCostReportTokensWithMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCostReportTokensWithMetadataValueMust(CostReportTokensWithMetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CostReportTokensWithMetadataType) ValueType(ctx context.Context) attr.Value {
	return CostReportTokensWithMetadataValue{}
}

var _ basetypes.ObjectValuable = CostReportTokensWithMetadataValue{}

type CostReportTokensWithMetadataValue struct {
	CostReportToken basetypes.StringValue `tfsdk:"cost_report_token"`
	LabelFilter     basetypes.ListValue   `tfsdk:"label_filter"`
	UnitScale       basetypes.StringValue `tfsdk:"unit_scale"`
	state           attr.ValueState
}

func (v CostReportTokensWithMetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["cost_report_token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["label_filter"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["unit_scale"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.CostReportToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cost_report_token"] = val

		val, err = v.LabelFilter.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["label_filter"] = val

		val, err = v.UnitScale.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["unit_scale"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CostReportTokensWithMetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CostReportTokensWithMetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CostReportTokensWithMetadataValue) String() string {
	return "CostReportTokensWithMetadataValue"
}

func (v CostReportTokensWithMetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var labelFilterVal basetypes.ListValue
	switch {
	case v.LabelFilter.IsUnknown():
		labelFilterVal = types.ListUnknown(types.StringType)
	case v.LabelFilter.IsNull():
		labelFilterVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		labelFilterVal, d = types.ListValue(types.StringType, v.LabelFilter.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"cost_report_token": basetypes.StringType{},
			"label_filter": basetypes.ListType{
				ElemType: types.StringType,
			},
			"unit_scale": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"cost_report_token": basetypes.StringType{},
		"label_filter": basetypes.ListType{
			ElemType: types.StringType,
		},
		"unit_scale": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"cost_report_token": v.CostReportToken,
			"label_filter":      labelFilterVal,
			"unit_scale":        v.UnitScale,
		})

	return objVal, diags
}

func (v CostReportTokensWithMetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(CostReportTokensWithMetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CostReportToken.Equal(other.CostReportToken) {
		return false
	}

	if !v.LabelFilter.Equal(other.LabelFilter) {
		return false
	}

	if !v.UnitScale.Equal(other.UnitScale) {
		return false
	}

	return true
}

func (v CostReportTokensWithMetadataValue) Type(ctx context.Context) attr.Type {
	return CostReportTokensWithMetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CostReportTokensWithMetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"cost_report_token": basetypes.StringType{},
		"label_filter": basetypes.ListType{
			ElemType: types.StringType,
		},
		"unit_scale": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = ValuesType{}

type ValuesType struct {
	basetypes.ObjectType
}

func (t ValuesType) Equal(o attr.Type) bool {
	other, ok := o.(ValuesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ValuesType) String() string {
	return "ValuesType"
}

func (t ValuesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	amountAttribute, ok := attributes["amount"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`amount is missing from object`)

		return nil, diags
	}

	amountVal, ok := amountAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`amount expected to be basetypes.Float64Value, was: %T`, amountAttribute))
	}

	dateAttribute, ok := attributes["date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`date is missing from object`)

		return nil, diags
	}

	dateVal, ok := dateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`date expected to be basetypes.StringValue, was: %T`, dateAttribute))
	}

	labelAttribute, ok := attributes["label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`label is missing from object`)

		return nil, diags
	}

	labelVal, ok := labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`label expected to be basetypes.StringValue, was: %T`, labelAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ValuesValue{
		Amount: amountVal,
		Date:   dateVal,
		Label:  labelVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewValuesValueNull() ValuesValue {
	return ValuesValue{
		state: attr.ValueStateNull,
	}
}

func NewValuesValueUnknown() ValuesValue {
	return ValuesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewValuesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ValuesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ValuesValue Attribute Value",
				"While creating a ValuesValue value, a missing attribute value was detected. "+
					"A ValuesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ValuesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ValuesValue Attribute Type",
				"While creating a ValuesValue value, an invalid attribute value was detected. "+
					"A ValuesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ValuesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ValuesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ValuesValue Attribute Value",
				"While creating a ValuesValue value, an extra attribute value was detected. "+
					"A ValuesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ValuesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewValuesValueUnknown(), diags
	}

	amountAttribute, ok := attributes["amount"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`amount is missing from object`)

		return NewValuesValueUnknown(), diags
	}

	amountVal, ok := amountAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`amount expected to be basetypes.Float64Value, was: %T`, amountAttribute))
	}

	dateAttribute, ok := attributes["date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`date is missing from object`)

		return NewValuesValueUnknown(), diags
	}

	dateVal, ok := dateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`date expected to be basetypes.StringValue, was: %T`, dateAttribute))
	}

	labelAttribute, ok := attributes["label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`label is missing from object`)

		return NewValuesValueUnknown(), diags
	}

	labelVal, ok := labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`label expected to be basetypes.StringValue, was: %T`, labelAttribute))
	}

	if diags.HasError() {
		return NewValuesValueUnknown(), diags
	}

	return ValuesValue{
		Amount: amountVal,
		Date:   dateVal,
		Label:  labelVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewValuesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ValuesValue {
	object, diags := NewValuesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewValuesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ValuesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewValuesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewValuesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewValuesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewValuesValueMust(ValuesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ValuesType) ValueType(ctx context.Context) attr.Value {
	return ValuesValue{}
}

var _ basetypes.ObjectValuable = ValuesValue{}

type ValuesValue struct {
	Amount basetypes.Float64Value `tfsdk:"amount"`
	Date   basetypes.StringValue  `tfsdk:"date"`
	Label  basetypes.StringValue  `tfsdk:"label"`
	state  attr.ValueState
}

func (v ValuesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["amount"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["date"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["label"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Amount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["amount"] = val

		val, err = v.Date.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["date"] = val

		val, err = v.Label.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["label"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ValuesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ValuesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ValuesValue) String() string {
	return "ValuesValue"
}

func (v ValuesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"amount": basetypes.Float64Type{},
		"date":   basetypes.StringType{},
		"label":  basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"amount": v.Amount,
			"date":   v.Date,
			"label":  v.Label,
		})

	return objVal, diags
}

func (v ValuesValue) Equal(o attr.Value) bool {
	other, ok := o.(ValuesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Amount.Equal(other.Amount) {
		return false
	}

	if !v.Date.Equal(other.Date) {
		return false
	}

	if !v.Label.Equal(other.Label) {
		return false
	}

	return true
}

func (v ValuesValue) Type(ctx context.Context) attr.Type {
	return ValuesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ValuesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"amount": basetypes.Float64Type{},
		"date":   basetypes.StringType{},
		"label":  basetypes.StringType{},
	}
}
