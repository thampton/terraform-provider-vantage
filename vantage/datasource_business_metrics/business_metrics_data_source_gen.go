// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_business_metrics

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func BusinessMetricsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"business_metrics": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"cost_report_tokens_with_metadata": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "The tokens for any CostReports that use the BusinessMetric, and the unit scale.",
							MarkdownDescription: "The tokens for any CostReports that use the BusinessMetric, and the unit scale.",
						},
						"created_by_token": schema.StringAttribute{
							Computed:            true,
							Description:         "The token of the User who created the BusinessMetric.",
							MarkdownDescription: "The token of the User who created the BusinessMetric.",
						},
						"title": schema.StringAttribute{
							Computed:            true,
							Description:         "The title of the BusinessMetric.",
							MarkdownDescription: "The title of the BusinessMetric.",
						},
						"token": schema.StringAttribute{
							Computed:            true,
							Description:         "The token of the BusinessMetric.",
							MarkdownDescription: "The token of the BusinessMetric.",
						},
						"values": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "The dates and amounts for the BusinessMetric",
							MarkdownDescription: "The dates and amounts for the BusinessMetric",
						},
					},
					CustomType: BusinessMetricsType{
						ObjectType: types.ObjectType{
							AttrTypes: BusinessMetricsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type BusinessMetricsModel struct {
	BusinessMetrics types.List `tfsdk:"business_metrics"`
}

var _ basetypes.ObjectTypable = BusinessMetricsType{}

type BusinessMetricsType struct {
	basetypes.ObjectType
}

func (t BusinessMetricsType) Equal(o attr.Type) bool {
	other, ok := o.(BusinessMetricsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t BusinessMetricsType) String() string {
	return "BusinessMetricsType"
}

func (t BusinessMetricsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	costReportTokensWithMetadataAttribute, ok := attributes["cost_report_tokens_with_metadata"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cost_report_tokens_with_metadata is missing from object`)

		return nil, diags
	}

	costReportTokensWithMetadataVal, ok := costReportTokensWithMetadataAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cost_report_tokens_with_metadata expected to be basetypes.ListValue, was: %T`, costReportTokensWithMetadataAttribute))
	}

	createdByTokenAttribute, ok := attributes["created_by_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by_token is missing from object`)

		return nil, diags
	}

	createdByTokenVal, ok := createdByTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by_token expected to be basetypes.StringValue, was: %T`, createdByTokenAttribute))
	}

	titleAttribute, ok := attributes["title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`title is missing from object`)

		return nil, diags
	}

	titleVal, ok := titleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`title expected to be basetypes.StringValue, was: %T`, titleAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	valuesAttribute, ok := attributes["values"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`values is missing from object`)

		return nil, diags
	}

	valuesVal, ok := valuesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`values expected to be basetypes.ListValue, was: %T`, valuesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return BusinessMetricsValue{
		CostReportTokensWithMetadata: costReportTokensWithMetadataVal,
		CreatedByToken:               createdByTokenVal,
		Title:                        titleVal,
		Token:                        tokenVal,
		Values:                       valuesVal,
		state:                        attr.ValueStateKnown,
	}, diags
}

func NewBusinessMetricsValueNull() BusinessMetricsValue {
	return BusinessMetricsValue{
		state: attr.ValueStateNull,
	}
}

func NewBusinessMetricsValueUnknown() BusinessMetricsValue {
	return BusinessMetricsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewBusinessMetricsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (BusinessMetricsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing BusinessMetricsValue Attribute Value",
				"While creating a BusinessMetricsValue value, a missing attribute value was detected. "+
					"A BusinessMetricsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BusinessMetricsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid BusinessMetricsValue Attribute Type",
				"While creating a BusinessMetricsValue value, an invalid attribute value was detected. "+
					"A BusinessMetricsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BusinessMetricsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("BusinessMetricsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra BusinessMetricsValue Attribute Value",
				"While creating a BusinessMetricsValue value, an extra attribute value was detected. "+
					"A BusinessMetricsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra BusinessMetricsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewBusinessMetricsValueUnknown(), diags
	}

	costReportTokensWithMetadataAttribute, ok := attributes["cost_report_tokens_with_metadata"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cost_report_tokens_with_metadata is missing from object`)

		return NewBusinessMetricsValueUnknown(), diags
	}

	costReportTokensWithMetadataVal, ok := costReportTokensWithMetadataAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cost_report_tokens_with_metadata expected to be basetypes.ListValue, was: %T`, costReportTokensWithMetadataAttribute))
	}

	createdByTokenAttribute, ok := attributes["created_by_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_by_token is missing from object`)

		return NewBusinessMetricsValueUnknown(), diags
	}

	createdByTokenVal, ok := createdByTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_by_token expected to be basetypes.StringValue, was: %T`, createdByTokenAttribute))
	}

	titleAttribute, ok := attributes["title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`title is missing from object`)

		return NewBusinessMetricsValueUnknown(), diags
	}

	titleVal, ok := titleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`title expected to be basetypes.StringValue, was: %T`, titleAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewBusinessMetricsValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	valuesAttribute, ok := attributes["values"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`values is missing from object`)

		return NewBusinessMetricsValueUnknown(), diags
	}

	valuesVal, ok := valuesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`values expected to be basetypes.ListValue, was: %T`, valuesAttribute))
	}

	if diags.HasError() {
		return NewBusinessMetricsValueUnknown(), diags
	}

	return BusinessMetricsValue{
		CostReportTokensWithMetadata: costReportTokensWithMetadataVal,
		CreatedByToken:               createdByTokenVal,
		Title:                        titleVal,
		Token:                        tokenVal,
		Values:                       valuesVal,
		state:                        attr.ValueStateKnown,
	}, diags
}

func NewBusinessMetricsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) BusinessMetricsValue {
	object, diags := NewBusinessMetricsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewBusinessMetricsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t BusinessMetricsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewBusinessMetricsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewBusinessMetricsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewBusinessMetricsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewBusinessMetricsValueMust(BusinessMetricsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t BusinessMetricsType) ValueType(ctx context.Context) attr.Value {
	return BusinessMetricsValue{}
}

var _ basetypes.ObjectValuable = BusinessMetricsValue{}

type BusinessMetricsValue struct {
	CostReportTokensWithMetadata basetypes.ListValue   `tfsdk:"cost_report_tokens_with_metadata"`
	CreatedByToken               basetypes.StringValue `tfsdk:"created_by_token"`
	Title                        basetypes.StringValue `tfsdk:"title"`
	Token                        basetypes.StringValue `tfsdk:"token"`
	Values                       basetypes.ListValue   `tfsdk:"values"`
	state                        attr.ValueState
}

func (v BusinessMetricsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["cost_report_tokens_with_metadata"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["created_by_token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["values"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.CostReportTokensWithMetadata.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cost_report_tokens_with_metadata"] = val

		val, err = v.CreatedByToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_by_token"] = val

		val, err = v.Title.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["title"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		val, err = v.Values.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["values"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v BusinessMetricsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v BusinessMetricsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v BusinessMetricsValue) String() string {
	return "BusinessMetricsValue"
}

func (v BusinessMetricsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	costReportTokensWithMetadataVal, d := types.ListValue(types.StringType, v.CostReportTokensWithMetadata.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"cost_report_tokens_with_metadata": basetypes.ListType{
				ElemType: types.StringType,
			},
			"created_by_token": basetypes.StringType{},
			"title":            basetypes.StringType{},
			"token":            basetypes.StringType{},
			"values": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	valuesVal, d := types.ListValue(types.StringType, v.Values.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"cost_report_tokens_with_metadata": basetypes.ListType{
				ElemType: types.StringType,
			},
			"created_by_token": basetypes.StringType{},
			"title":            basetypes.StringType{},
			"token":            basetypes.StringType{},
			"values": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"cost_report_tokens_with_metadata": basetypes.ListType{
				ElemType: types.StringType,
			},
			"created_by_token": basetypes.StringType{},
			"title":            basetypes.StringType{},
			"token":            basetypes.StringType{},
			"values": basetypes.ListType{
				ElemType: types.StringType,
			},
		},
		map[string]attr.Value{
			"cost_report_tokens_with_metadata": costReportTokensWithMetadataVal,
			"created_by_token":                 v.CreatedByToken,
			"title":                            v.Title,
			"token":                            v.Token,
			"values":                           valuesVal,
		})

	return objVal, diags
}

func (v BusinessMetricsValue) Equal(o attr.Value) bool {
	other, ok := o.(BusinessMetricsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CostReportTokensWithMetadata.Equal(other.CostReportTokensWithMetadata) {
		return false
	}

	if !v.CreatedByToken.Equal(other.CreatedByToken) {
		return false
	}

	if !v.Title.Equal(other.Title) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	if !v.Values.Equal(other.Values) {
		return false
	}

	return true
}

func (v BusinessMetricsValue) Type(ctx context.Context) attr.Type {
	return BusinessMetricsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v BusinessMetricsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"cost_report_tokens_with_metadata": basetypes.ListType{
			ElemType: types.StringType,
		},
		"created_by_token": basetypes.StringType{},
		"title":            basetypes.StringType{},
		"token":            basetypes.StringType{},
		"values": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}
